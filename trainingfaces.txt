#test file that recognizes faces
#33 min mark
import os
import cv2
import numpy as np
from PIL import Image
import pickle

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
image_dir = os.path.join(BASE_DIR, "images")

face_cascade = cv2.CascadeClassifier('Sauce/data/haarcascade_smile.xml')
recognizer = cv2.face.LBPHFaceRecognizer_create()

current_id = 0
label_ids = {}#these keep track of the categories of training images 

y_labels = []#related to labels ^
x_train = []#pixel values

for root, dirs, files, in os.walk(image_dir):
    for file in files:
        if file.endswith("png") or file.endswith("jpg"):
            path = os.path.join(root, file)
            label = os.path.basename(os.path.dirname(path)).replace(" ","-").lower()
#            print(label, path)

            if not label in label_ids:
                label_ids[label] = current_id
                current_id += 1
            id_ = label_ids[label]
#            print(label_ids)


#            y_labels.append(label)
#            x_train.append(path)
#            pil_image = np.array(Image.open(path).convert("L"))#				 Python image Library and gets path, set to grayscale
            pil_image = Image.open(path).convert("L")            

            image_array = np.array(pil_image, "uint8")# numpy array of the image -> numbers (Training is based on number values) 
#            print(image_array) // testing purposes
            faces = face_cascade.detectMultiScale(image_array, scaleFactor=1.5,minNeighbors=5)
            
            for (x,y,w,h) in faces:
                roi = image_array[y:y+h, x:x+w]
                x_train.append(roi)#reigon of interest data
                y_labels.append(id_)

#writing bytes as file
with open("lables.pickle",'wb') as f:
    pickle.dump(label_ids, f)

#print(y_labels)
#print(x_train)


recognizer.train(x_train, np.array(y_labels))
recognizer.save("tf.yml")